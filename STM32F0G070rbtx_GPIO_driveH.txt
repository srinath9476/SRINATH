/*
 * STM32F0G070rbtx_GPIO_driver.h
 *
 *  Created on: Jan 28, 2021
 *      Author: lenoo
 */

#ifndef INC_STM32F0G070RBTX_GPIO_DRIVER_H_
#define INC_STM32F0G070RBTX_GPIO_DRIVER_H_

#include "STM32F0G070rbtx.h"
typedef struct
{
	uint8_t GPIO_PinNumber;		/*!<Possible Values from @GPIO_PIN_NUMBERS>*/
	uint8_t GPIO_PinMode;    	/*!<Possible Values from @GPIO_PIN_MODES>*/
	uint8_t GPIO_PinSpeed;		/*!<Possible Values from @GPIO_PIN_MODES>*/
	uint8_t GPIO_PinPupdControl;/*!<Possible Values from @GPIO_PL>*/
	uint8_t GPIO_PinOPType;		/*!<Possible Values from @GPIO_OP_TYPE>*/
	uint8_t GPIO_PinAltFunMode;	/*!<Possible Values from @GPIO_PIN_MODES>*/
}GPIO_PinConfig_t;
/*
 * This is a handle Structure for a GPIO pin
 */
typedef struct
{
	// Pointer to hold the base address of the GPIO peripheral
	GPIO_Regdef_t *pGPIOxBaseAddr;// pointer variable, x indicates A,B,C, to F
    GPIO_PinConfig_t GPIO_PinConfig;

}GPIO_Handle_t;

//@GPIO_PIN_NUMBERS
//GPIO mode register macros
#define GPIO_PIN_NO_0			0
#define GPIO_PIN_NO_1			1
#define GPIO_PIN_NO_2			2
#define GPIO_PIN_NO_3			3
#define GPIO_PIN_NO_4			4
#define GPIO_PIN_NO_5			5
#define GPIO_PIN_NO_6			6
#define GPIO_PIN_NO_7			7
#define GPIO_PIN_NO_8			8
#define GPIO_PIN_NO_9			9
#define GPIO_PIN_NO_10			10
#define GPIO_PIN_NO_11			11
#define GPIO_PIN_NO_12			12
#define GPIO_PIN_NO_13			13
#define GPIO_PIN_NO_14			14
#define GPIO_PIN_NO_15			15
//@GPIO_PIN_MODES
//GPIO mode register macros
#define GPIO_MODE_IN 			0  // 0 to 3 is Non interrupt modes
#define GPIO_MODE_OUT 			1
#define GPIO_MODE_ALTFN			2
#define GPIO_MODE_ANALOG        3
#define GPIO_MODE_IT_FT			4  // Falling Edge
#define GPIO_MODE_IT_RG			5  // Raising Edge
#define GPIO_MODE_IT_RFG		6  // Raising and Falling Edge

/* @GPIO_OP_TYPE>*/
//GPIO Port Output Type Register (GPIOx_OTYPER)

#define GPIO_OP_TYPE_PP			0	// Push Pull
#define GPIO_OP_TYPE_OD			1  	// Open Drain

/* @GPIO_OP_SPEED>*/
// GPIO Port Speed Register
#define GPIO_OP_SPEED_LW		0
#define GPIO_OP_SPEED_MD		1
#define GPIO_OP_SPEED_HD		2
#define GPIO_OP_SPEED_VH		3

/* @GPIO_PL>*/
//GPIO Port Pull-up/Pull-Down register
#define GPIO_PL_NO			0
#define	GPIO_PL_UP			1
#define GPIO_PL_DN			2
//#define GPIO_PL_Rvd			3


/************************************************************************************
 * 								API`S supported by this driver
 * 			For more information about the API`s Check the function definitions
 ************************************************************************************
 ************************************************************************************/
/*
 * Clock enable
 */
void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx,uint8_t EnorDI);
/*
 * GPIO initializing
 */
void GPIOx_Init(GPIO_Handle_t *pGPIOHandle); // Pointer to handle the structure, so enclosed with one arguments
void GPIO_DeInit(GPIO_Regdef_t *pGPIOx);//bringing all relevant GPIO state register to reset value
						/* Here for reseting not required to reset individual, instead, has RCC_IOPORT reset register*/
/*
 * Data Read and Write
 */
uint8_t GPIO_ReadFromInputPin(GPIO_Regdef_t *pGPIOx, uint8_t PinNumber);
/*
 *  As name implies needed GPIO base address and pin numbers
 *  and its return type is either 0 or 1, so function return type is
 *  uint8_t instead of void
 */


uint16_t GPIO_ReadFromInputPort(GPIO_Regdef_t *pGPIOx);

void GPIO_WriteToOutPin(GPIO_Regdef_t *pGPIOx, uint8_t PinNumber, uint8_t Value);
/*
 * The return type is nothing since it is output,
 * 3rd argument has 0,1, SET or Reset also, so we need to have macros for GPIO_SET
 * or RESET
 */

void GPIO_WriteToOutPort(GPIO_Regdef_t *pGPIOx, uint16_t Value);
void GPIO_ToggleOutputPin(GPIO_Regdef_t *pGPIOx, uint8_t PinNumber);
/*
 * IRQ Configuration and ISR handling
 */
void GPIO_IRQConfig(uint8_t IRQNumber, uint8_t IRQPriority, uint8_t EnorDi);
void GPIO_IRQHandling(uint8_t PinNumber);

extern void GPIO_PeriClockControl(GPIO_Regdef_t *pGPIOx,uint8_t EnorDI);
#endif /* INC_STM32F0G070RBTX_GPIO_DRIVER_H_ */